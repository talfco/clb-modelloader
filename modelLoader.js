// Generated by CoffeeScript 1.4.0
(function() {
  var ModelLoader, winston, _und;

  _und = require("underscore");

  winston = require("winston");

  module.exports = ModelLoader = (function() {

    function ModelLoader() {}

    ModelLoader.prototype.autoload = function(serv, db, modelpath) {
      var files, fs, modelNames, path,
        _this = this;
      fs = require("fs");
      path = require("path");
      files = fs.readdirSync(modelpath);
      modelNames = _und.map(files, function(f) {
        return path.basename(f);
      });
      return _und.each(modelNames, function(modelName) {
        var model, modelC, suffix;
        if (modelName !== void 0) {
          suffix = ".coffee";
          if (modelName.indexOf(suffix, modelName.length - suffix.length) !== -1) {
            modelC = require(modelpath + "/" + modelName);
            winston.info("Creating mogoose object for: " + modelName);
            model = new modelC();
            return _this.expose(model, serv);
          }
        }
      });
    };

    ModelLoader.prototype.expose = function(model, serv) {
      var collection;
      collection = model.getModelName() + 's';
      winston.info('ModelLoader: installing request handlers for /' + collection);
      serv.get('/' + collection, function(req, res) {
        winston.info('ModelLoader: GET for  ' + collection + ' received, sending the collection for ' + model.getDBModel().modelName);
        return model.getDBModel().find({}, function(err, docs) {
          winston.info("JSON Data", docs);
          if (err !== null) {
            return res.json(err, 500);
          } else {
            return res.send(docs);
          }
        });
      });
      serv.put('/' + collection + '/:id', function(req, res) {
        var conditions, doc;
        winston.info('ModelLoader: PUT received for model ' + req.params.id);
        winston.info("JSON Data", req.body);
        conditions = {
          _id: req.params.id
        };
        doc = req.body;
        delete doc._id;
        return model.getDBModel().update(conditions, doc, {}, function(err, numAffected) {
          winston.info('ModelLoader: Update done on ' + numAffected + " row - errors: " + err);
          if (err === null) {
            return res.send(doc);
          } else {
            return res.json(err, 500);
          }
        });
      });
      serv.del('/' + collection + '/:id', function(req, res) {
        var conditions;
        winston.info('ModelLoader: DELETE received for model ' + req.params.id);
        conditions = {
          _id: req.params.id
        };
        return model.getDBModel().remove(conditions, function(err, numAffected) {
          winston.info('ModelLoader: Delete done on ' + numAffected + " row - errors: " + err);
          if (err === null) {
            return res.json(200);
          } else {
            return res.json(err, 500);
          }
        });
      });
      return serv.post('/' + collection, function(req, res) {
        var conditions, doc, obj;
        winston.info('ModelLoader: POST received for model ' + collection);
        winston.info("JSON Data", req.body);
        conditions = {
          _id: req.params.id
        };
        doc = req.body;
        obj = model.newInstance(doc);
        winston.info('ModelLoader: Save to dbmodel ' + model.getModelName());
        obj.save();
        winston.info('ModelLoader: New record created');
        winston.info("JSON Data", obj.model);
        return res.send(obj.model);
      });
    };

    return ModelLoader;

  })();

}).call(this);
